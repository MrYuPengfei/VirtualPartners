cmake_minimum_required(VERSION 3.5)

project(VirtualPartners VERSION 0.1 LANGUAGES CXX)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 COMPONENTS Widgets REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets REQUIRED)


find_package(QT NAMES Qt6 REQUIRED COMPONENTS Widgets LinguistTools)
# 查找 Qt
find_package(Qt6 COMPONENTS Core Widgets Multimedia REQUIRED)

# 包含 Qt 的头文件目录
include_directories(${Qt6_INCLUDE_DIRS})

# # 寻找 SQLite3 库
# find_package(SQLite3 REQUIRED)
# add_library(sqlite3 sqlite3.c)

# 包含 SQLite3 头文件目录
# include_directories(${SQLite3_INCLUDE_DIRS})

# 定义源文件变量
set(SOURCE_FILES
    main.cpp
    PetWindow.cpp
    SettingsWindow.cpp
)

# 定义头文件变量（如果有额外的头文件）
set(HEADER_FILES
    PetWindow.h config.h SettingsWindow.h
)
# # 启用 Qt 的自动 moc、uic 和 rcc
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES} ${RESOURCE_FILES})

target_link_libraries(${PROJECT_NAME} PRIVATE Qt6::Core Qt6::Widgets Qt6::Multimedia)

target_compile_definitions(${PROJECT_NAME} PRIVATE $<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>, QT_QML_DEBUG>)


set_target_properties(VirtualPartners PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"  # 或者你希望的目录
)
